/* What you should know */
 * In our assembly codes, we used Intel style,
 * in which the destination register is located first,
 * the register name and immediate number remains the same.
 */

/* Definations of registers
 *  R0              - constant zero
 *  R1              - loop variable i, address in initialization of L
 *  R2              - loop variable j, user key in initialization of L
 *  R3              - loop variable k
 *  R4              - constant 26 (t)
 *  R5              - constant 4 (c)
 *  R6              - constant 77 (3*t)
 *  R7              - constant P = 0xb7e15163, then Q = 0x9e3779b9
 *  R8              - 2 * i (address of S)
 *  R9              - 2 * j + 60 (address of J)
 *  R10             - S[i-1] when initializing S, A when mixing
 *  R11             - S[i] when initializing S, B when mixing
 *  R12             - S[i] when mixing
 *  R13             - L[j] when mixing
 *  R14, R15, R16   - temporary variables
 *
 * Definations of data memories
 *  Mem[0 ~ 51]     - S, round key, where S[0] is initialized to be P
 *  Mem[60 ~ 67]    - L, prebuilt with user key, cleared when key expansion completed
 */

// initialize
SUB R0, R0, R1              // R0 <= 0
ADDI R4, R0, 26             // R4 <= 26
ADDI R5, R0, 4              // R5 <= 4
ADDI R6, R0, 78             // R6 <= 78

// L is initialized in data memory based on user input

// initialize S
SUB R1, R1, R1              // R1 <= 0
LW R7, 68(R0)			    // R7 <= Mem[68] 0xb7e15163 (magic number P)
SW R7, 0(R0)                // Mem[0] <= R7
LW R7, 70(R0)     			// R7 <= Mem[70] 0x9e3779b9 (magic number Q)
ADDI R1, R1, 1              // R1 <= R1 + 1 (i <= 1)
ADD R8, R1, R1              // R8 <= R1 << 1 (S loop begin)
LW R10, -2(R8)              // R10 <= Mem[R8 - 2] (R10 <= S[i-1])
ADD R11, R10, R7            // R11 <= R10 + R7 (R11 <= S[i-1] + Q)
SW R11, 0(R8)               // Mem[R8] <= R11 (S[i] <= R11)
ADDI R1, R1, 1              // R1 <= R1 + 1 (i <= i + 1)
BNE R1, R4, -6              // if R1 != R4, jump to PC + 2 - 12 (S loop end)

// mix key into S
SUB R1, R1, R1              // R1 <= 0 (i <= 0)
SUB R2, R2, R2              // R2 <= 0 (j <= 0)
SUB R3, R3, R3              // R3 <= 0 (k <= 0)
SUB R10, R10, R10           // R10 <= 0 (A <= 0)
SUB R11, R11, R11           // R11 <= 0 (B <= 0)
// mix loop begin
ADD R8, R1, R1              // R8 <= R1 << 1
ADD R9, R2, R2              // R9 <= R2 << 1
ADDI R9, R9, 60             // R9 <= R9 + 60
LW R12, 0(R8)               // R12 <= Mem[R8] (R12 <= S[i])
LW R13, 0(R9)               // R13 <= Mem[R9] (R13 <= L[j])
// A <= S[i] + (A + B)
ADD R16, R10, R11           // R16 <= R10 + R11
ADD R10, R12, R16           // R10 <= R12 + R16
// A <= A <<< 3
ADDI R16, R0, 29            // R16 <= 29 (loop cycles)
ADDI R14, R10, 0            // R14 <= R10 (copy A to R14)
SUBI R16, R16, 1            // R16 <= R16 - 1 (R14 loop begin)
SHR R14, R14, 1             // R14 <= R14 >> 1
BNE R16, R0, -3             // if R16 != R0, jump to PC + 2 - 6 (R14 loop end)
ADDI R16, R0, 3             // R16 <= 3 (loop cycles)
ADDI R15, R10, 0            // R15 <= R10 (copy A to R15)
SUBI R16, R16, 1            // R16 <= R16 - 1 (R15 loop begin)
ADD R15, R15, R15           // R15 <= R15 << 1
BNE R16, R0, -3             // if R16 != R0, jump to PC + 2 - 6 (R15 loop end)
OR R10, R14, R15            // R10 <= R14 | R15
SW R10, 0(R8)               // Mem[R8] <= R10 (S[i] <= A)
// R16 <= (A + B)
ADD R15, R10, R11           // R15 <= R10 + R11
// B <= L[j] + (A + B)
ADD R11, R13, R15           // R11 <= R13 + R15
// B <<< (A + B)
ANDI R16, R15, 31           // R16 <= R15 & 0x0000001f
SUBI R16, R16, 32           // R16 <= R16 - 32
ADDI R14, R11, 0            // R14 <= R11 (copy B to R14)
BEQ R16, R0, 3              // if R16 = R0, jump to PC + 2 + 6 (R14 loop begin)
ADDI R16, R16, 1            // R16 <= R16 + 1
SHR R14, R14, 1             // R14 <= R14 >> 1
BNE R16, R0, -3             // if R16 != R0, jump to PC + 2 - 6 (R14 loop end)
ANDI R16, R15, 31           // R16 <= R15 & 0x0000001f
ADDI R15, R11, 0            // R15 <= R11 (copy B to R15)
BEQ R16, R0, 3              // if R16 = R0, jump to PC + 2 + 6 (R15 loop begin)
SUBI R16, R16, 1            // R16 <= R16 - 1
ADD R15, R15, R15           // R15 <= R15 << 1
BNE R16, R0, -3             // if R16 != R0, jump to PC + 2 - 6 (R15 loop end)
OR R11, R14, R15            // R11 <= R14 | R15
SW R11, 0(R9)               // Mem[R9] <= R11 (L[j] <= B)
// afterthought
ADDI R1, R1, 1              // R1 <= R1 + 1 (i <= i + 1)
BNE R1, R4, 1               // if R1 != R4, jump to PC + 1 + 1 (if i == 4)
SUB R1, R1, R1              // R1 <= 0 (then i <= 0)
ADDI R2, R2, 1              // R2 <= R2 + 1 (j <= j + 1)
BNE R2, R5, 1               // if R2 != R5, jump to PC + 1 + 1 (if j == 4)
SUB R2, R2, R2              // R2 <= 0 (then j <= 0)
ADDI R3, R3, 1              // R3 <= R3 + 1 (k <= k + 1)
BNE R3, R6, -44             // mix loop end

// clear L
ADDI R1, R0, 60             // R1 <= 60 (address of L[0])
SW R0, 0(R1)                // Mem[R1] <= R0
ADDI R1, R1, 2              // R1 <= R1 + 2 (find address of L[1])
SW R0, 0(R1)                // Mem[R1] <= R0
ADDI R1, R1, 2              // R1 <= R1 + 2 (find address of L[2])
SW R0, 0(R1)                // Mem[R1] <= R0
ADDI R1, R1, 2              // R1 <= R1 + 2 (find address of L[3])
SW R0, 0(R1)                // Mem[R1] <= R0

HAL                         // Halt