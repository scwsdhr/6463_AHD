
SUB R0, R0, R0          // R0 <= 0
LW R1 52(R0)            // R1 <= Mem[R0 + 52]
LW R2 54(R0)            // R2 <= Mem[R0 + 54]
SUB R3, R3, R3          // R3 <= 0
LW R6, 0(R0)            // R6 <= Mem[R0 + 0]
LW R7, 2(R0)            // R7 <= Mem[R0 + 2]
ADD R8, R1, R6          // R8 <= R1 + R6
ADD R9, R2, R7          // R9 <= R2 + R7
ADDI R10, R0, 12        // R10 <= R0 + 12

ADDI R3, R3, 1          // R3 <= R3 + 1
ADD R4, R3, R3          // R4 <= R3 + R3
ADDI R5, R4, 1          // R5 <= R4 + 1
ADD R4, R4, R4          // R4 <= R4 + R4
ADD R5, R5, R5          // R5 <= R5 + R5
LW R6, 0(R4)            // R6 <= Mem[R4 + 0]
LW R7, 0(R5)            // R7 <= Mem[R5 + 0]
NOR R11, R8, R9         // R11 <= !(R8 | R9)
AND R12, R8, R9         // R12 <= R8 & R9
NOR R8, R11, R12        // R8 <= !(R11 | R12)
ADDI R11, R8, 0         // R11 <= R8 + 0
ANDI R13, R9, 31        // R13 <= R9 & x"0000001F"
SUBI R13, R13, 32       // R13 <= R13 - 32
BEQ R13, R0, 3          // if R13 = R0, jump to PC + 2 + 6
SHR R11, R11, 1         // R11 >> 1
ADDI R13, R13, 1        // R13 <= R13 + 1
BNE R13, R0, -3         // if R13 != R0, jump to PC + 2 - 6
ADDI R12, R8, 0         // R12 <= R8 + 0
ANDI R13, R9, 31        // R13 <= R9 & x"0000001F"
BEQ R13, R0, 3          // if R13 != R0, jump to PC + 2 + 6
ADD R12, R12, R12       // R12 <= R12 + R12
SUBI R13, R13, 1        // R13 <= R13 - 1
BNE R13, R0, -3         // if R13 != R0, jump to PC + 2 - 6
OR R8, R11, R12         // R8 <= R11 | 12
ADD R8, R8, R6          // R8 <= R8 + R6
NOR R11, R9, R8         // R11 <= !(R9 | R8)
AND R12, R9, R8         // R12 <= R9 & R8
NOR R9, R11, R12        // R9 <= !(R11 | R12)
ADDI R11, R9, 0         // R11 <= R9 + 0
ANDI R13, R8, 31        // R13 <= R8 & x"0000001F"
SUBI R13, R13, 32       // R13 <= R13 - 32
BEQ R13, R0, 3          // if R13 = R0, jump to PC + 2 + 6
SHR R11, R11, 1         // R11 >> 1
ADDI R13, R13, 1        // R13 <= R13 + 1
BNE R13, R0, -3         // if R13 != R0, jump to PC + 2 - 6
ADDI R12, R9, 0         // R12 <= R9 + 0
ANDI R13, R8, 31        // R13 <= R8 & x"0000001F"
BEQ R13, R0, 3          // if R13 = R0, jump to PC + 2 + 6
ADD R12, R12, R12       // R12 <= R12 + R12
SUBI R13, R13, 1        // R13 <= R13 - 1
BNE R13, R0, -3         // if R13 != R0, jump to PC + 2 - 6
OR R9, R11, R12         // R9 <= R11 + R12
ADD R9, R9, R7          // R9 <= R9 + R7
BLT R3, R10, -44        // if R3 < R10, jump to PC + 2 - 88
HAL                     // Halt